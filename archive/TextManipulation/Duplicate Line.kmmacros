<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>IsActive</key>
		<true/>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>DisplayKind</key>
						<string>None</string>
						<key>File</key>
						<data>
						</data>
						<key>IsActive</key>
						<true/>
						<key>IsDisclosed</key>
						<true/>
						<key>MacroActionType</key>
						<string>ExecuteAppleScript</string>
						<key>NewFile</key>
						<string></string>
						<key>Text</key>
						<string>set {l1, l2, start, len, selLines, selLinesLen} to getSelection()tell application "BBEdit"	tell window 1		local lineno		local lastline		local emptyLine		set emptyLine to false				set destinationline to l2 + 1		set lineCount to count lines		set lastline to destinationline &gt; lineCount		if lastline then			set destination to insertion point after line destinationline			set contents of destination to return			set AppleScript's text item delimiters to ""			if length of selLines &gt; 1 then				set selLines to (characters 1 through ((length of selLines) - 1) of selLines) as string				set start to start + 1			else				set emptyLine to true			end if		end if		set destination to insertion point before line destinationline		if emptyLine is not true then			set contents of destination to selLines		end if		set selLinesLength to length of selLines		set selectionStart to start + selLinesLength		set selectionEnd to selectionStart + (len - 1)				if len &gt; 0 then			select (characters selectionStart through selectionEnd)		else			select insertion point after character (selectionStart - 1)		end if			end tellend tellon getSelection()	local l1, l2, start, len       tell application "BBEdit"		tell selection			set {l1, l2} to {startLine, endLine}			set {start, len} to {characterOffset, length}			if length &gt; 0 and endColumn = 1 then				set l2 to l2 - 1			end if		end tell		set selLines to my collectLines(window 1, l1, l2)		set selLinesLen to length of selLines	end tell	return {l1, l2, start, len, selLines, selLinesLen}	return {l1:l1, l2:l2, start:start, len:len, selLines:selLines, selLinesLen:selLinesLen}end getSelectionon collectLines(win, l1, l2)	local mytext, mystring	set mytext to ""	tell win		repeat with l from l1 to l2			set mytext to mytext &amp; contents of line l &amp; return		end repeat	end tell	return mytextend collectLines</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>Variable</string>
					</dict>
				</array>
				<key>IsActive</key>
				<true/>
				<key>Name</key>
				<string>Duplicate Line</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>2</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>768</integer>
						<key>TriggerRepeat</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>3C610795-125F-47BD-BE70-76A08F3E5D6C</string>
			</dict>
		</array>
		<key>Name</key>
		<string>KG_KM_TextManipulation</string>
		<key>UID</key>
		<string>8EE3C829-3723-4C08-82D0-74810DFB0B0B</string>
	</dict>
</array>
</plist>
